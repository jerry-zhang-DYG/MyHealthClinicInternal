
name: Deploy

on:
  push:
    branches: [ master ]
    
env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_DEFAULT_OUTPUT: json
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
  AWS_CLUSTER_NAME: ${{ secrets.AWS_CLUSTER_NAME }} 
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}  
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2   
    
    - name: Generate build number
      id: buildNumber
      uses: einaregilsson/build-number@v2 
      with:
        token: ${{secrets.github_token}}        

    - name: Print new build number
      run: echo "Build number is $BUILD_NUMBER"

    # Login into AWS
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
   
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: docker build
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}   
        BUILDNUMBER: ${{ steps.buildNumber.outputs.build_number }}
        CONTAINER_IMAGE: ${{ secrets.ECR_REPOSITORY }}:${{ steps.buildNumber.outputs.build_number }}
      run: |        
       docker build \
         -t $CONTAINER_IMAGE \
         -t $ECR_REGISTRY/$CONTAINER_IMAGE .

       echo "::set-output name=image::$ECR_REGISTRY/$CONTAINER_IMAGE"

    - name: Display Images
      run: docker images

    # Pushes the image to the ECR
    - name: Push the Image
      id: tag-image  
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        CONTAINER_IMAGE: ${{ secrets.ECR_REPOSITORY }}:${{ steps.buildNumber.outputs.build_number }}
      run: |      
        docker push $ECR_REGISTRY/$CONTAINER_IMAGE        

    - name: Setup kubeconfig
      id: setup-kubeconfig
      run: |
        aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $AWS_CLUSTER_NAME 

    - name: Deploy k8s yaml
      id: deploy-k8s-yaml
      env:
        K8S_YAML_DIR: ./manifests 
        IMAGE_NAME: ${{ steps.build-image.outputs.image }}
      run: |
        # Setup kustomize
        cd $K8S_YAML_DIR
        curl -s -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
        ./kustomize edit set image image-placeholder=$IMAGE_NAME
        ./kustomize build . | kubectl apply -f -
        # Verify deployment
        kubectl rollout status deployment/health-app-deployment
        # List Public IP of cluster
        kubectl get services -o wide
        kubectl get ingress 
    
    - name: Run Selenium Test
      run: |
          npm install selenium-side-runner
          npx selenium-side-runner --server ${{secrets.SELENIUM_GRID_HUB}} --base-url "http://$(kubectl get service health-app-service -o jsonpath="{.status.loadBalancer.ingress[*].hostname}")" test/selenium/fulltest.side
    
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
        tag_name: 'PROD.${{ steps.buildNumber.outputs.build_number }}'
        # The name of the release. For example, `Release v1.0.1`
        release_name: 'Production Release: ${{steps.buildNumber.outputs.build_number}}'
        # Text describing the contents of the tag.
        body: " [LASTEST COMMIT](${{github.event.push.commits[0][url]}})): ${{github.event.push.commits[0][message]}}"
        # `true` to create a draft (unpublished) release, `false` to create a published one. Default: `false`
        draft: true
